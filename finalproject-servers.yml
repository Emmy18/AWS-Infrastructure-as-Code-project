Description: >
  Emmanuel Iduh final project servers script

Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String

Resources:
  RootRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${EnvironmentName}-Role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: '/'
  RolePolicies:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: AmazonS3ReadOnlyAccess
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 's3:Get*'
              - 's3:List*'
            Resource:
              - 'arn:aws:s3:::finalprojectx'
              - 'arn:aws:s3:::finalprojectx/*'
      Roles:
      - !Ref RootRole
  RootInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: '/'
      Roles:
      - !Ref RootRole
  LBSecGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allow http to the load balancer
      VpcId:
        Fn::ImportValue:
          !Sub '${EnvironmentName}-VPCID'
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 8080
        ToPort: 8080
        CidrIp: 0.0.0.0/0
  WebServerSecGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allow http to our hosts
      VpcId:
        Fn::ImportValue:
          !Sub '${EnvironmentName}-VPCID'
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0
  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo apt-get update -y
          sudo apt-get install apache2 -y
          sudo systemctl start apache2.service
          apt-get install unzip awscli -y
          cd /var/www/html
          rm index.html
          aws s3 cp s3://finalprojectx/index.html .
          #!/bin/bash
      BlockDeviceMappings:
      - DeviceName: /dev/sdk
        Ebs:
          VolumeSize: '10'
      ImageId: ami-0747bdcabd34c712a
      SecurityGroups:
      - !Ref WebServerSecGroup
      InstanceType: t3.medium
      IamInstanceProfile: !Ref RootInstanceProfile
  WebAppGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      VPCZoneIdentifier:
      - Fn::ImportValue:
          !Sub '${EnvironmentName}-PRIV-SN'
      LaunchConfigurationName: !Ref WebAppLaunchConfig
      MinSize: '4'
      MaxSize: '5'
      TargetGroupARNs:
      - !Ref WebAppTargetGroup
  WebAppLB:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Subnets:
      - Fn::ImportValue: !Sub ${EnvironmentName}-PUB-SN1
      - Fn::ImportValue: !Sub ${EnvironmentName}-PUB-SN2
      SecurityGroups:
      - Ref: LBSecGroup
  Listener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: 
          Ref: WebAppTargetGroup
      LoadBalancerArn: 
        Ref: WebAppLB
      Port: '80'
      Protocol: "HTTP"
  ALBListenerRule:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: !Ref 'WebAppTargetGroup'
      Conditions:
      - Field: path-pattern
        Values: [/]
      ListenerArn: !Ref 'Listener'
      Priority: 1
  WebAppTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 20
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 12
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: 
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-VPCID"
  
Outputs:
  WebAppLBDNSName:
    Description: DNS name of the Load Balancer
    Value: !Join [ "", [ 'http://', !GetAtt WebAppLB.DNSName ]]
    Export:
      Name: !Sub ${EnvironmentName}-WebAppLBDNSName
